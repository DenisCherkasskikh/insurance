// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: insurance/crash_rec.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CrashRec struct {
	Index        string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Brand        string `protobuf:"bytes,2,opt,name=brand,proto3" json:"brand,omitempty"`
	Model        string `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	Year         string `protobuf:"bytes,4,opt,name=year,proto3" json:"year,omitempty"`
	Owner        string `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
	LicensePlate string `protobuf:"bytes,6,opt,name=licensePlate,proto3" json:"licensePlate,omitempty"`
	VinNumber    string `protobuf:"bytes,7,opt,name=vinNumber,proto3" json:"vinNumber,omitempty"`
	Odometer     string `protobuf:"bytes,8,opt,name=odometer,proto3" json:"odometer,omitempty"`
	Side         string `protobuf:"bytes,9,opt,name=side,proto3" json:"side,omitempty"`
	Part         string `protobuf:"bytes,10,opt,name=part,proto3" json:"part,omitempty"`
	Payout       string `protobuf:"bytes,11,opt,name=payout,proto3" json:"payout,omitempty"`
}

func (m *CrashRec) Reset()         { *m = CrashRec{} }
func (m *CrashRec) String() string { return proto.CompactTextString(m) }
func (*CrashRec) ProtoMessage()    {}
func (*CrashRec) Descriptor() ([]byte, []int) {
	return fileDescriptor_4132a8ee67c6d119, []int{0}
}
func (m *CrashRec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrashRec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrashRec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrashRec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrashRec.Merge(m, src)
}
func (m *CrashRec) XXX_Size() int {
	return m.Size()
}
func (m *CrashRec) XXX_DiscardUnknown() {
	xxx_messageInfo_CrashRec.DiscardUnknown(m)
}

var xxx_messageInfo_CrashRec proto.InternalMessageInfo

func (m *CrashRec) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *CrashRec) GetBrand() string {
	if m != nil {
		return m.Brand
	}
	return ""
}

func (m *CrashRec) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *CrashRec) GetYear() string {
	if m != nil {
		return m.Year
	}
	return ""
}

func (m *CrashRec) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *CrashRec) GetLicensePlate() string {
	if m != nil {
		return m.LicensePlate
	}
	return ""
}

func (m *CrashRec) GetVinNumber() string {
	if m != nil {
		return m.VinNumber
	}
	return ""
}

func (m *CrashRec) GetOdometer() string {
	if m != nil {
		return m.Odometer
	}
	return ""
}

func (m *CrashRec) GetSide() string {
	if m != nil {
		return m.Side
	}
	return ""
}

func (m *CrashRec) GetPart() string {
	if m != nil {
		return m.Part
	}
	return ""
}

func (m *CrashRec) GetPayout() string {
	if m != nil {
		return m.Payout
	}
	return ""
}

func init() {
	proto.RegisterType((*CrashRec)(nil), "denischerkasskikh.insurance.insurance.CrashRec")
}

func init() { proto.RegisterFile("insurance/crash_rec.proto", fileDescriptor_4132a8ee67c6d119) }

var fileDescriptor_4132a8ee67c6d119 = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xb1, 0x4e, 0xeb, 0x30,
	0x14, 0x86, 0x9b, 0xde, 0xb6, 0xb7, 0x35, 0x4c, 0x16, 0x42, 0x06, 0x21, 0x0b, 0x55, 0x42, 0x62,
	0x6a, 0x07, 0x16, 0x66, 0xca, 0x8c, 0x50, 0x46, 0x16, 0xe4, 0xd8, 0x47, 0xc4, 0x4a, 0x62, 0x47,
	0xb6, 0x03, 0xcd, 0x5b, 0x30, 0xf0, 0x50, 0x8c, 0x1d, 0x19, 0x51, 0xf2, 0x22, 0xc8, 0x36, 0x6a,
	0xca, 0xf6, 0x7f, 0x9f, 0x7f, 0x4b, 0x47, 0xe7, 0xa0, 0x33, 0xa9, 0x6c, 0x63, 0x98, 0xe2, 0xb0,
	0xe6, 0x86, 0xd9, 0xfc, 0xd9, 0x00, 0x5f, 0xd5, 0x46, 0x3b, 0x8d, 0xaf, 0x04, 0x28, 0x69, 0x79,
	0x0e, 0xa6, 0x60, 0xd6, 0x16, 0xb2, 0xc8, 0x57, 0xfb, 0xf2, 0x90, 0x96, 0x1f, 0x63, 0x34, 0xdf,
	0xf8, 0xaf, 0x29, 0x70, 0x7c, 0x82, 0xa6, 0x52, 0x09, 0xd8, 0x92, 0xe4, 0x32, 0xb9, 0x5e, 0xa4,
	0x11, 0xbc, 0xcd, 0x0c, 0x53, 0x82, 0x8c, 0xa3, 0x0d, 0xe0, 0x6d, 0xa5, 0x05, 0x94, 0xe4, 0x5f,
	0xb4, 0x01, 0x30, 0x46, 0x93, 0x16, 0x98, 0x21, 0x93, 0x20, 0x43, 0xf6, 0x4d, 0xfd, 0xa6, 0xc0,
	0x90, 0x69, 0x6c, 0x06, 0xc0, 0x4b, 0x74, 0x5c, 0x4a, 0x0e, 0xca, 0xc2, 0x63, 0xc9, 0x1c, 0x90,
	0x59, 0x78, 0xfc, 0xe3, 0xf0, 0x05, 0x5a, 0xbc, 0x4a, 0xf5, 0xd0, 0x54, 0x19, 0x18, 0xf2, 0x3f,
	0x14, 0x06, 0x81, 0xcf, 0xd1, 0x5c, 0x0b, 0x5d, 0x81, 0x03, 0x43, 0xe6, 0xe1, 0x71, 0xcf, 0x7e,
	0x0e, 0x2b, 0x05, 0x90, 0x45, 0x9c, 0xc3, 0x67, 0xef, 0x6a, 0x66, 0x1c, 0x41, 0xd1, 0xf9, 0x8c,
	0x4f, 0xd1, 0xac, 0x66, 0xad, 0x6e, 0x1c, 0x39, 0x0a, 0xf6, 0x97, 0xee, 0xd2, 0xcf, 0x8e, 0x26,
	0xbb, 0x8e, 0x26, 0xdf, 0x1d, 0x4d, 0xde, 0x7b, 0x3a, 0xda, 0xf5, 0x74, 0xf4, 0xd5, 0xd3, 0xd1,
	0xd3, 0xed, 0x8b, 0x74, 0x79, 0x93, 0xad, 0xb8, 0xae, 0xd6, 0xf7, 0x7e, 0xc5, 0x9b, 0x83, 0x15,
	0xaf, 0x87, 0x7b, 0x6c, 0x0f, 0xb2, 0x6b, 0x6b, 0xb0, 0xd9, 0x2c, 0x1c, 0xe6, 0xe6, 0x27, 0x00,
	0x00, 0xff, 0xff, 0x8f, 0x48, 0x2f, 0x9f, 0xb5, 0x01, 0x00, 0x00,
}

func (m *CrashRec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrashRec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrashRec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payout) > 0 {
		i -= len(m.Payout)
		copy(dAtA[i:], m.Payout)
		i = encodeVarintCrashRec(dAtA, i, uint64(len(m.Payout)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Part) > 0 {
		i -= len(m.Part)
		copy(dAtA[i:], m.Part)
		i = encodeVarintCrashRec(dAtA, i, uint64(len(m.Part)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Side) > 0 {
		i -= len(m.Side)
		copy(dAtA[i:], m.Side)
		i = encodeVarintCrashRec(dAtA, i, uint64(len(m.Side)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Odometer) > 0 {
		i -= len(m.Odometer)
		copy(dAtA[i:], m.Odometer)
		i = encodeVarintCrashRec(dAtA, i, uint64(len(m.Odometer)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.VinNumber) > 0 {
		i -= len(m.VinNumber)
		copy(dAtA[i:], m.VinNumber)
		i = encodeVarintCrashRec(dAtA, i, uint64(len(m.VinNumber)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.LicensePlate) > 0 {
		i -= len(m.LicensePlate)
		copy(dAtA[i:], m.LicensePlate)
		i = encodeVarintCrashRec(dAtA, i, uint64(len(m.LicensePlate)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintCrashRec(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Year) > 0 {
		i -= len(m.Year)
		copy(dAtA[i:], m.Year)
		i = encodeVarintCrashRec(dAtA, i, uint64(len(m.Year)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Model) > 0 {
		i -= len(m.Model)
		copy(dAtA[i:], m.Model)
		i = encodeVarintCrashRec(dAtA, i, uint64(len(m.Model)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Brand) > 0 {
		i -= len(m.Brand)
		copy(dAtA[i:], m.Brand)
		i = encodeVarintCrashRec(dAtA, i, uint64(len(m.Brand)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintCrashRec(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCrashRec(dAtA []byte, offset int, v uint64) int {
	offset -= sovCrashRec(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CrashRec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovCrashRec(uint64(l))
	}
	l = len(m.Brand)
	if l > 0 {
		n += 1 + l + sovCrashRec(uint64(l))
	}
	l = len(m.Model)
	if l > 0 {
		n += 1 + l + sovCrashRec(uint64(l))
	}
	l = len(m.Year)
	if l > 0 {
		n += 1 + l + sovCrashRec(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovCrashRec(uint64(l))
	}
	l = len(m.LicensePlate)
	if l > 0 {
		n += 1 + l + sovCrashRec(uint64(l))
	}
	l = len(m.VinNumber)
	if l > 0 {
		n += 1 + l + sovCrashRec(uint64(l))
	}
	l = len(m.Odometer)
	if l > 0 {
		n += 1 + l + sovCrashRec(uint64(l))
	}
	l = len(m.Side)
	if l > 0 {
		n += 1 + l + sovCrashRec(uint64(l))
	}
	l = len(m.Part)
	if l > 0 {
		n += 1 + l + sovCrashRec(uint64(l))
	}
	l = len(m.Payout)
	if l > 0 {
		n += 1 + l + sovCrashRec(uint64(l))
	}
	return n
}

func sovCrashRec(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCrashRec(x uint64) (n int) {
	return sovCrashRec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CrashRec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrashRec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrashRec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrashRec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrashRec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrashRec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrashRec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Brand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrashRec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrashRec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrashRec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Brand = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrashRec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrashRec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrashRec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Year", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrashRec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrashRec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrashRec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Year = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrashRec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrashRec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrashRec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LicensePlate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrashRec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrashRec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrashRec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LicensePlate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VinNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrashRec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrashRec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrashRec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VinNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Odometer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrashRec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrashRec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrashRec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Odometer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrashRec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrashRec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrashRec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Side = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Part", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrashRec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrashRec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrashRec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Part = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrashRec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrashRec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrashRec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payout = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrashRec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrashRec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCrashRec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCrashRec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrashRec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrashRec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCrashRec
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCrashRec
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCrashRec
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCrashRec        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCrashRec          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCrashRec = fmt.Errorf("proto: unexpected end of group")
)
